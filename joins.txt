Experiment 6a

1) Write a SQL statement to prepare a list with salesman name, customer name and their cities for the salesmen and customer who belongs to the same city.
SELECT name, cust_name, s.city
FROM salesman s, customer c
where s.city = c.city;

NAME	CUST_NAME	CITY
James Hoog	Nick Rimando	New York
Pit Alex	Brad Guzan	London
Nail Knite	Fabian Johns	Paris
Mc Lyon	Fabian Johns	Paris
Pit Alex	Julian Green	London

2) Write a SQL statement to make a list with order no, purchase amount, customer name and their cities for those orders which order amount between 500 and 2000.
SELECT ord_no, purch_amt, cust_name, city
FROM customer c INNER JOIN orders o
ON c.customer_id = o.customer_id
WHERE purch_amt between 500 and 2000;

ORD_NO	PURCH_AMT	CUST_NAME	CITY
70007	948.5	Graham Zusi	California
70010	1983.43	Fabian Johns	Paris

3) Write a SQL statement to know which salesman are working for which customer.
SELECT s.name || ' works for ' || cust_name
FROM salesman s, customer c
WHERE s.salesman_id = c.salesman_id;


S.NAME||'WORKSFOR'||CUST_NAME
James Hoog works for Nick Rimando
Nail Knite works for Graham Zusi
Pit Alex works for Brad Guzan
Mc Lyon works for Fabian Johns
James Hoog works for Brad Davis
Lauson works for Geoff Camero
Nail Knite works for Julian Green

4) Write a SQL statement to find the list of customers who appointed a
salesman for their jobs who gets a commission from the company is more
than 12%.
SELECT c.*
FROM customer c, salesman s
WHERE c.salesman_id = s.salesman_id and
  	s.commission > 0.12;


CUSTOMER_ID	CUST_NAME	CITY	GRADE	SALESMAN_ID
3002	Nick Rimando	New York	100	5001
3005	Graham Zusi	California	200	5002
3004	Fabian Johns	Paris	300	5006
3007	Brad Davis	NewYork	200	5001
3008	Julian Green	London	300	5002

5) Write a SQL statement to find the list of customers who appointed a
salesman for their jobs who does not live in the same city where their
customer lives, and gets a commission is above 12% .
SELECT c.*
FROM customer c, salesman s
WHERE c.salesman_id = s.salesman_id and s.commission > 0.12 and s.city <> c.city;

CUSTOMER_ID	CUST_NAME	CITY	GRADE	SALESMAN_ID
3005	Graham Zusi	California	200	5002
3007	Brad Davis	NewYork	200	5001
3008	Julian Green	London	300	5002

6) Write a SQL statement to find the details of a order i.e. order number,
order date, amount of order, which customer gives the order and which
salesman works for that customer and how much commission he gets for
an order.
SELECT ord_no, ord_date, purch_amt, cust_name || ' gave the order, ' || name || ' works for him and he got ' || commission*purch_amt || ' for this order'
from customer c, orders o, salesman s
where c.customer_id = o.customer_id and
	c.salesman_id = s.salesman_id and
	s.salesman_id = o.salesman_id;


ORD_NO	ORD_DATE	PURCH_AMT	CUST_NAME||'GAVETHEORDER,'||NAME||'WORKSFORHIMANDHEGOT'||COMMISSION*PURCH_AMT||'FORTHISORDER'
70001	05-OCT-12	150.5	Graham Zusi gave the order, Nail Knite works for him and he got 19.565 for this order
70009	10-SEP-12	270.65	Brad Guzan gave the order, Pit Alex works for him and he got 29.7715 for this order
70002	05-OCT-12	65.26	Nick Rimando gave the order, James Hoog works for him and he got 9.789 for this order
70004	17-AUG-12	110.5	Geoff Camero gave the order, Lauson works for him and he got 13.26 for this order
70007	10-SEP-12	948.5	Graham Zusi gave the order, Nail Knite works for him and he got 123.305 for this order
70005	27-JUL-12	2400.6	Brad Davis gave the order, James Hoog works for him and he got 360.09 for this order
70008	10-SEP-12	5760	Nick Rimando gave the order, James Hoog works for him and he got 864 for this order
70010	10-OCT-12	1983.43	Fabian Johns gave the order, Mc Lyon works for him and he got 277.6802 for this order
70003	10-OCT-12	2480.4	Geoff Camero gave the order, Lauson works for him and he got 297.648 for this order
70012	27-JUN-12	250.45	Julian Green gave the order, Nail Knite works for him and he got 32.5585 for this order
70013	25-APR-12	3045.6	Nick Rimando gave the order, James Hoog works for him and he got 456.84 for this order


Experiment 6b
1. For the order table shown above compute the following
a. Total number of tuples : 
       SELECT count(*) FROM orders;


COUNT(*)
12


b. Average purchase amount
        SELECT AVG(purch_amt) FROM orders;

AVG(PURCH_AMT)
1461.765

c. Maximum purchase amount
        SELECT max(purch_amt) FROM orders;

MAX(PURCH_AMT)
5760


d. Sum of purchase amount
        SELECT sum(purch_amt) FROM orders;

SUM(PURCH_AMT)
17541.18

e. Minimum purchase amount
        SELECT min(purch_amt) FROM orders;

MIN(PURCH_AMT)
65.26


2. Write a SQL statement to find the number of salesmen currently listing for all of their
Customers.

3. Write a SQL statement know how many customer have listed their names.
SELECT count(cust_name)
FROM customer
WHERE  cust_name IS NOT NULL;

COUNT(CUST_NAME)
8


4. Write a SQL statement find the number of customers who gets at least a gradation for his/her performance.
SELECT count(cust_name)
FROM customer
WHERE  grade IS NOT NULL;

COUNT(CUST_NAME)
7


5. Write a SQL statement to find the highest purchase amount ordered by the each customer on a particular date with their ID, order date and highest purchase amount.
select full_table.*
from
(
	select c1.cust_name, o1.purch_amt, c1.customer_id, o1.ord_date
	/* select * will cause error of column unambiguiosly defined because customer_id is in both table*/
	from customer c1, orders o1
	WHERE c1.customer_id = o1.customer_id
) full_table
INNER JOIN
(
	SELECT c2.cust_name as c2name, max(o2.purch_amt) as o2amt
	FROM customer c2, orders o2
	WHERE c2.customer_id = o2.customer_id
	group by c2.cust_name
	order by max(o2.purch_amt)
) small_table
ON c2name = full_table.cust_name and o2amt  = full_table.purch_amt;

CUST_NAME	PURCH_AMT	CUSTOMER_ID	ORD_DATE
Jozy Altidor	75.29	3003	17-AUG-12
Julian Green	250.45	3008	27-JUN-12
Brad Guzan	270.65	3001	10-SEP-12
Graham Zusi	948.5	3005	10-SEP-12
Fabian Johns	1983.43	3004	10-OCT-12
Brad Davis	2400.6	3007	27-JUL-12
Geoff Camero	2480.4	3009	10-OCT-12
Nick Rimando	5760	3002	10-SEP-12


6. Write a SQL statement to find the highest purchase amount with their ID and order date, for only those customers who have highest purchase amount in a day is more than 2000.
select full_table.*
from
(
	select c1.cust_name, o1.purch_amt, c1.customer_id, o1.ord_date
	/* select * will cause error of column unambiguiosly defined because customer_id is in both table*/
	from customer c1, orders o1
	WHERE c1.customer_id = o1.customer_id
) full_table
INNER JOIN
(
	SELECT c2.cust_name as c2name, max(o2.purch_amt) as o2amt
	FROM customer c2, orders o2
	WHERE c2.customer_id = o2.customer_id
	group by c2.cust_name
	order by max(o2.purch_amt)
) small_table
ON c2name = full_table.cust_name and o2amt  = full_table.purch_amt
WHERE full_table.purch_amt > 2000;


--5)
SELECT c.cust_name, max(o.purch_amt)
FROM customer c, orders o
WHERE c.customer_id = o.customer_id
group by c.cust_name
order by max(o.purch_amt) desc;

CUST_NAME	PURCH_AMT	CUSTOMER_ID	ORD_DATE
Nick Rimando	5760	3002	10-SEP-12
Brad Davis	2400.6	3007	27-JUL-12
Geoff Camero	2480.4	3009	10-OCT-12


7. Write a SQL statement to find the highest purchase amount with their ID and order date, for those customers who have a higher purchase amount in a day is within the range 2000 and 6000.

8. Create a order view orderover500 to display all order details above 500$
drop view orderover500;
create view orderover500 as (select * from orders where purch_amt > 500);
View created.

9. Display all the records of order over 500
select * from orderover500;

ORD_NO	PURCH_AMT	ORD_DATE	CUSTOMER_ID	SALESMAN_ID
70007	948.5	10-SEP-12	3005	5002
70005	2400.6	27-JUL-12	3007	5001
70008	5760	10-SEP-12	3002	5001
70010	1983.43	10-OCT-12	3004	5006
70003	2480.4	10-OCT-12	3009	5003
70013	3045.6	25-APR-12	3002	500









1. Write a query to display all the orders from the orders table issued by the
salesman ‘Paul Adam’.
select ord_no, purch_amt, ord_date, customer_id
from orders
where salesman_id = (
                	select salesman_id
                	from salesman
                	where name='James Hoog'
    	);

ORD_NO	PURCH_AMT	ORD_DATE	CUSTOMER_ID
70002	65.26	05-OCT-12	3002
70005	2400.6	27-JUL-12	3007
70008	5760	10-SEP-12	3002
70013	3045.6	25-APR-12	3002



2.  Write a query to display all the orders for the salesman who belongs to the
city London
select ord_no, purch_amt, ord_date, customer_id
from orders
where salesman_id = (
                	select salesman_id
                	from salesman
                	where city='London'
    	);

ORD_NO	PURCH_AMT	ORD_DATE	CUSTOMER_ID
70009	270.65	10-SEP-12	3001


3.  Write a query to find all the orders issued against the salesman who works
for customer whose id is 3007.
SELECT * from orders
WHERE salesman_id = (
	SELECT salesman_id
	FROM customer
	WHERE customer_id = 3007
);

ORD_NO	PURCH_AMT	ORD_DATE	CUSTOMER_ID	SALESMAN_ID
70002	65.26	05-OCT-12	3002	5001
70005	2400.6	27-JUL-12	3007	5001
70008	5760	10-SEP-12	3002	5001
70013	3045.6	25-APR-12	3002	5001


4. Write a query to display all the orders which values are greater than the
average order value for 10th October 2012
SELECT *
FROM orders
WHERE purch_amt > (
	SELECT AVG(purch_amt)
	FROM orders
	WHERE ord_date = '10-oct-2012'
);

ORD_NO	PURCH_AMT	ORD_DATE	CUSTOMER_ID	SALESMAN_ID
70005	2400.6	27-JUL-12	3007	5001
70008	5760	10-SEP-12	3002	5001
70003	2480.4	10-OCT-12	3009	5003
70013	3045.6	25-APR-12	3002	5001


5. Write a query to find all orders attributed to a salesman in New york.
SELECT *
FROM orders
WHERE salesman_id = (
	SELECT salesman_id
	FROM salesman
	WHERE city = 'New York'
);

ORD_NO	PURCH_AMT	ORD_DATE	CUSTOMER_ID	SALESMAN_ID
70002	65.26	05-OCT-12	3002	5001
70005	2400.6	27-JUL-12	3007	5001
70008	5760	10-SEP-12	3002	5001
70013	3045.6	25-APR-12	3002	5001








6.  Write a query to display the commission of all the salesmen servicing
customers in Paris.
SELECT commission
FROM salesman
WHERE salesman_id = (
	SELECT salesman_id
	FROM customer
	WHERE city = 'Paris'
);
COMMISSION
.14


7. Write a query to display all the customers whose id is 2001 below the
salesman ID of Mc Lyon.
SELECT *
FROM customer
WHERE customer_id < (
	SELECT salesman_id-2001
	FROM salesman
	WHERE name = 'Mc Lyon'
);

CUSTOMER_ID	CUST_NAME	CITY	GRADE	SALESMAN_ID
3002	Nick Rimando	New York	100	5001
3001	Brad Guzan	London	-	5005
3004	Fabian Johns	Paris	300	5006
3003	Jozy Altidor	Moscow	200	5007


8. Write a query to count the customers with grades above New York’s
Average.
SELECT count(customer_id)
FROM customer
WHERE grade > (
	SELECT AVG(grade)
	FROM customer
	WHERE city = 'New York'
);

COUNT(CUSTOMER_ID)
5





  
9. Write a query to display all customers with orders on October 5, 2012.
SELECT *
FROM customer
WHERE customer_id IN(
	SELECT customer_id
	FROM orders
	WHERE ord_date = '05-OCT-2012'
);

CUSTOMER_ID	CUST_NAME	CITY	GRADE	SALESMAN_ID
3005	Graham Zusi	California	200	5002
3002	Nick Rimando	New York	100	5001



Create banking schema with all constraints

drop table branch;
drop table customer;
drop table account;
drop table loan;
drop table depositor;
drop table borrower;


create table branch(branch_name varchar2(20) NOT NULL PRIMARY KEY, branch_city varchar2(20), assets varchar2(200));
create table customer(customer_name varchar2(20) NOT NULL PRIMARY KEY, customer_street number(3), customer_city varchar2(20));
create table account(account_number number(10) NOT NULL PRIMARY KEY, branch_name varchar2(20), balance number(10));
create table loan(loan_number number(10) NOT NULL PRIMARY KEY, branch_name varchar2(20), amount number(10));
create table depositor(customer_name varchar2(20), account_number number(10));
create table borrower(customer_name varchar2(20), loan_number number(10));


1. Primary key and foreign key for all tables
ALTER TABLE depositor ADD PRIMARY KEY(customer_name, account_number);
ALTER TABLE borrower ADD PRIMARY KEY(customer_name, loan_number);

ALTER TABLE account ADD FOREIGN KEY(branch_name) REFERENCES branch(branch_name);
ALTER TABLE loan ADD FOREIGN KEY(branch_name) REFERENCES branch(branch_name);

ALTER TABLE depositor ADD FOREIGN KEY(customer_name) REFERENCES customer(customer_name);
ALTER TABLE depositor ADD FOREIGN KEY(account_number) REFERENCES account(account_number);

ALTER TABLE borrower ADD FOREIGN KEY(customer_name) REFERENCES customer(customer_name);
ALTER TABLE borrower ADD FOREIGN KEY(loan_number) REFERENCES loan(loan_number);

Table altered.
2. Check constraints on branch-city so that it takes values(‘chennai’, ‘mumbai’, ‘delhi’, ‘kolkotta’)
ALTER TABLE branch
ADD CONSTRAINT branch_city_check
CHECK (branch_city in ('chennai', 'mumbai', 'delhi', 'kolkotta'));
Table altered.
3. Account should have a minimum balance of 10000
ALTER TABLE account
ADD CHECK (balance >= 10000);
Table altered.
4. Loan amount should not be less than 50000
ALTER TABLE loan
ADD CHECK (amount >= 50000);
Table altered.






